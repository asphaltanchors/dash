import { pgTable, pgSchema, varchar, text, date, numeric, boolean, timestamp, bigint } from "drizzle-orm/pg-core"
import { sql } from "drizzle-orm"

export const analyticsMart = pgSchema("analytics_mart");


export const fctOrderLineItemsInAnalyticsMart = analyticsMart.table("fct_order_line_items", {
	lineItemId: varchar("line_item_id"),
	orderNumber: varchar("order_number"),
	sourceType: text("source_type"),
	orderDate: date("order_date"),
	customer: varchar(),
	paymentMethod: varchar("payment_method"),
	status: text(),
	dueDate: date("due_date"),
	productService: varchar("product_service"),
	productServiceDescription: varchar("product_service_description"),
	productServiceQuantity: numeric("product_service_quantity"),
	productServiceRate: numeric("product_service_rate"),
	productServiceAmount: numeric("product_service_amount"),
	productServiceClass: varchar("product_service_class"),
	unitOfMeasure: varchar("unit_of_measure"),
	customerSalesTaxCode: varchar("customer_sales_tax_code"),
	isTaxExempt: boolean("is_tax_exempt"),
	productServiceSalesTaxCode: varchar("product_service_sales_tax_code"),
	billingAddress: text("billing_address"),
	billingAddressCity: varchar("billing_address_city"),
	billingAddressState: varchar("billing_address_state"),
	billingAddressPostalCode: varchar("billing_address_postal_code"),
	billingAddressCountry: varchar("billing_address_country"),
	shippingAddress: text("shipping_address"),
	shippingAddressCity: varchar("shipping_address_city"),
	shippingAddressState: varchar("shipping_address_state"),
	shippingAddressPostalCode: varchar("shipping_address_postal_code"),
	shippingAddressCountry: varchar("shipping_address_country"),
	shippingMethod: varchar("shipping_method"),
	shipDate: date("ship_date"),
	memo: varchar(),
	messageToCustomer: varchar("message_to_customer"),
	terms: varchar(),
	salesRep: varchar("sales_rep"),
	class: varchar(),
	productServiceServiceDate: varchar("product_service_service_date"),
	inventorySite: varchar("inventory_site"),
	inventoryBin: varchar("inventory_bin"),
	serialNo: varchar("serial_no"),
	lotNo: varchar("lot_no"),
	externalId: varchar("external_id"),
	quickBooksInternalId: varchar("quick_books_internal_id"),
	currency: varchar(),
	exchangeRate: numeric("exchange_rate"),
	createdDate: timestamp("created_date", { mode: 'string' }),
	modifiedDate: timestamp("modified_date", { mode: 'string' }),
	productFamily: text("product_family"),
	materialType: text("material_type"),
	isKit: boolean("is_kit"),
	itemType: varchar("item_type"),
	itemSubtype: varchar("item_subtype"),
	productSalesDescription: varchar("product_sales_description"),
	standardSalesPrice: numeric("standard_sales_price"),
	standardPurchaseCost: numeric("standard_purchase_cost"),
	marginPercentage: numeric("margin_percentage"),
	marginAmount: numeric("margin_amount"),
});

export const fctProductsInAnalyticsMart = analyticsMart.table("fct_products", {
	quickBooksInternalId: varchar("quick_books_internal_id"),
	itemName: varchar("item_name"),
	salesDescription: varchar("sales_description"),
	productFamily: text("product_family"),
	materialType: text("material_type"),
	isKit: boolean("is_kit"),
	itemType: varchar("item_type"),
	itemSubtype: varchar("item_subtype"),
	purchaseDescription: varchar("purchase_description"),
	salesPrice: numeric("sales_price"),
	purchaseCost: numeric("purchase_cost"),
	marginPercentage: numeric("margin_percentage"),
	marginAmount: numeric("margin_amount"),
	manufacturerSPartNumber: varchar("manufacturer_s_part_number"),
	unitOfMeasure: varchar("unit_of_measure"),
	loadDate: varchar("load_date"),
	snapshotDate: varchar("snapshot_date"),
});

export const fctInventoryHistoryInAnalyticsMart = analyticsMart.table("fct_inventory_history", {
	itemName: varchar("item_name"),
	inventoryDate: date("inventory_date"),
	quantityOnHand: numeric("quantity_on_hand"),
	quantityOnOrder: numeric("quantity_on_order"),
	quantityOnSalesOrder: numeric("quantity_on_sales_order"),
	availableQuantity: numeric("available_quantity"),
	totalInventoryVisibility: numeric("total_inventory_visibility"),
	previousQuantityOnHand: numeric("previous_quantity_on_hand"),
	quantityChange: numeric("quantity_change"),
	productDescription: varchar("product_description"),
	productFamily: text("product_family"),
	materialType: text("material_type"),
	isKit: boolean("is_kit"),
	itemType: varchar("item_type"),
	itemSubtype: varchar("item_subtype"),
	unitOfMeasure: varchar("unit_of_measure"),
	salesPrice: numeric("sales_price"),
	purchaseCost: numeric("purchase_cost"),
	inventoryValueAtCost: numeric("inventory_value_at_cost"),
	inventoryValueAtSalesPrice: numeric("inventory_value_at_sales_price"),
	itemStatus: varchar("item_status"),
	isBackup: boolean("is_backup"),
	originalSnapshotDate: varchar("original_snapshot_date"),
});

export const fctOrdersInAnalyticsMart = analyticsMart.table("fct_orders", {
	orderNumber: varchar("order_number"),
	sourceType: text("source_type"),
	orderDate: date("order_date"),
	customer: text(),
	paymentMethod: text("payment_method"),
	status: text(),
	dueDate: date("due_date"),
	isTaxExempt: boolean("is_tax_exempt"),
	isPaid: boolean("is_paid"),
	isBackdated: boolean("is_backdated"),
	billingAddress: text("billing_address"),
	billingAddressCity: text("billing_address_city"),
	billingAddressState: text("billing_address_state"),
	billingAddressPostalCode: text("billing_address_postal_code"),
	billingAddressCountry: text("billing_address_country"),
	shippingAddress: text("shipping_address"),
	shippingAddressCity: text("shipping_address_city"),
	shippingAddressState: text("shipping_address_state"),
	shippingAddressPostalCode: text("shipping_address_postal_code"),
	shippingAddressCountry: text("shipping_address_country"),
	shippingMethod: text("shipping_method"),
	shipDate: date("ship_date"),
	memo: text(),
	messageToCustomer: text("message_to_customer"),
	class: text(),
	currency: text(),
	exchangeRate: numeric("exchange_rate"),
	terms: text(),
	salesRep: text("sales_rep"),
	transactionId: text("transaction_id"),
	quickbooksInternalId: text("quickbooks_internal_id"),
	externalId: text("external_id"),
	createdDate: timestamp("created_date", { mode: 'string' }),
	modifiedDate: timestamp("modified_date", { mode: 'string' }),
	totalLineItemsAmount: numeric("total_line_items_amount"),
	totalTax: numeric("total_tax"),
	totalAmount: numeric("total_amount"),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	itemCount: bigint("item_count", { mode: "number" }),
	effectiveTaxRate: numeric("effective_tax_rate"),
});
